OpenShadingLanguage 1.00
# Compiled by oslc 1.7.0dev
shader test
local	vector	___210_d	%read{30,112} %write{29,100}
local	float	___210_dd	%read{31,108} %write{30,101}
local	float	___210_t	%read{39,110} %write{37,108}
local	vector	___233_axis	%read{128,130} %write{125,125}
local	float	___233_cosang	%read{127,168} %write{126,126}
local	float	___233_sinang	%read{138,163} %write{126,126}
local	float	___233_cosang1	%read{137,162} %write{127,127}
local	float	___233_x	%read{131,163} %write{128,128}
local	float	___233_y	%read{136,161} %write{129,129}
local	float	___233_z	%read{138,166} %write{130,130}
local	matrix	___233_M	%read{172,172} %write{170,170}
local	vector	X	%read{3,174} %write{1,1}
local	vector	Y	%read{3,115} %write{2,2}
local	vector	XY	%read{22,117} %write{3,3}
local	vector	Zero	%read{120,121} %write{4,4}
local	vector	___296_V	%read{6,119} %write{5,12}
local	point	___296_Q	%read{68,115} %write{62,98}
const	string	$const1	"Test vector functions\n\n"		%read{0,0} %write{2147483647,-1}
const	vector	$const2	1 0 0		%read{1,1} %write{2147483647,-1}
const	vector	$const3	0 1 0		%read{2,2} %write{2147483647,-1}
const	int	$const4	0		%read{4,128} %write{2147483647,-1}
const	vector	$const5	0 1 2		%read{5,5} %write{2147483647,-1}
const	string	$const6	"  V = vector (%g) has components %g, %g, %g\n"		%read{9,9} %write{2147483647,-1}
temp	float	$tmp1	%read{9,9} %write{6,6}
const	int	$const7	1		%read{7,129} %write{2147483647,-1}
temp	float	$tmp2	%read{9,9} %write{7,7}
const	int	$const8	2		%read{8,130} %write{2147483647,-1}
temp	float	$tmp3	%read{9,9} %write{8,8}
const	int	$const9	8		%read{10,10} %write{2147483647,-1}
const	string	$const10	"  After V[1] = 8, V = (%g)\n"		%read{11,11} %write{2147483647,-1}
const	float	$const11	0.5		%read{12,12} %write{2147483647,-1}
const	string	$const12	"  After V[2] = 0.5, V = (%g)\n"		%read{13,13} %write{2147483647,-1}
const	string	$const13	"  dot ((%g), (%g)) = %g\n"		%read{15,17} %write{2147483647,-1}
temp	float	$tmp4	%read{15,15} %write{14,14}
temp	float	$tmp5	%read{17,17} %write{16,16}
const	string	$const14	"  cross ((%g), (%g)) = %g\n"		%read{19,19} %write{2147483647,-1}
temp	vector	$tmp6	%read{19,19} %write{18,18}
const	string	$const15	"  length (%g) = %g\n"		%read{21,23} %write{2147483647,-1}
temp	float	$tmp7	%read{21,21} %write{20,20}
temp	float	$tmp8	%read{23,23} %write{22,22}
const	string	$const16	"  distance ((%g), (%g)) = %g\n"		%read{25,27} %write{2147483647,-1}
temp	float	$tmp9	%read{25,25} %write{24,24}
temp	float	$tmp10	%read{27,27} %write{26,26}
const	string	$const17	"  distance ((%g), (%g), (%g)) = %g\n"		%read{44,115} %write{2147483647,-1}
temp	float	$tmp11	%read{44,44} %write{33,43}
const	string	$const18	"distance"		%read{28,99} %write{2147483647,-1}
const	float	$const19	0		%read{31,170} %write{2147483647,-1}
temp	int	$tmp12	%read{32,32} %write{31,31}
temp	float	$tmp13	%read{37,37} %write{36,36}
temp	vector	$tmp14	%read{36,36} %write{35,35}
temp	float	$tmp15	%read{41,41} %write{40,40}
const	float	$const20	1		%read{39,170} %write{2147483647,-1}
const	string	$const21	"clamp"		%read{38,109} %write{2147483647,-1}
temp	float	$tmp16	%read{40,40} %write{39,39}
temp	vector	$tmp17	%read{42,42} %write{41,41}
temp	point	$tmp18	%read{43,43} %write{42,42}
temp	float	$tmp19	%read{61,61} %write{50,60}
temp	int	$tmp20	%read{49,49} %write{48,48}
temp	float	$tmp21	%read{54,54} %write{53,53}
temp	vector	$tmp22	%read{53,53} %write{52,52}
temp	float	$tmp23	%read{58,58} %write{57,57}
temp	float	$tmp24	%read{57,57} %write{56,56}
temp	vector	$tmp25	%read{59,59} %write{58,58}
temp	point	$tmp26	%read{60,60} %write{59,59}
const	point	$const22	0.5 0.5 0		%read{62,62} %write{2147483647,-1}
temp	float	$tmp27	%read{79,79} %write{68,78}
temp	int	$tmp28	%read{67,67} %write{66,66}
temp	float	$tmp29	%read{72,72} %write{71,71}
temp	vector	$tmp30	%read{71,71} %write{70,70}
temp	float	$tmp31	%read{76,76} %write{75,75}
temp	float	$tmp32	%read{75,75} %write{74,74}
temp	vector	$tmp33	%read{77,77} %write{76,76}
temp	point	$tmp34	%read{78,78} %write{77,77}
const	point	$const23	0.5 0.5 0.5		%read{80,80} %write{2147483647,-1}
temp	float	$tmp35	%read{97,97} %write{86,96}
temp	int	$tmp36	%read{85,85} %write{84,84}
temp	float	$tmp37	%read{90,90} %write{89,89}
temp	vector	$tmp38	%read{89,89} %write{88,88}
temp	float	$tmp39	%read{94,94} %write{93,93}
temp	float	$tmp40	%read{93,93} %write{92,92}
temp	vector	$tmp41	%read{95,95} %write{94,94}
temp	point	$tmp42	%read{96,96} %write{95,95}
const	point	$const24	2 1 0		%read{98,98} %write{2147483647,-1}
temp	float	$tmp43	%read{115,115} %write{104,114}
temp	int	$tmp44	%read{103,103} %write{102,102}
temp	float	$tmp45	%read{108,108} %write{107,107}
temp	vector	$tmp46	%read{107,107} %write{106,106}
temp	float	$tmp47	%read{112,112} %write{111,111}
temp	float	$tmp48	%read{111,111} %write{110,110}
temp	vector	$tmp49	%read{113,113} %write{112,112}
temp	point	$tmp50	%read{114,114} %write{113,113}
const	string	$const25	"  normalize (%g) = %g\n"		%read{117,121} %write{2147483647,-1}
temp	vector	$tmp51	%read{117,117} %write{116,116}
temp	vector	$tmp52	%read{119,119} %write{118,118}
temp	vector	$tmp53	%read{121,121} %write{120,120}
const	string	$const26	"  rotate(%g, PI/2, (0,0,0), (0,0,1)) = %g\n"		%read{174,174} %write{2147483647,-1}
temp	point	$tmp54	%read{174,174} %write{173,173}
const	float	$const27	3.1415927		%read{122,122} %write{2147483647,-1}
temp	float	$tmp55	%read{126,126} %write{122,122}
const	float	$const28	2		%read{122,122} %write{2147483647,-1}
const	point	$const29	0 0 0		%read{124,173} %write{2147483647,-1}
const	point	$const30	0 0 1		%read{124,124} %write{2147483647,-1}
const	string	$const31	"rotate"		%read{123,123} %write{2147483647,-1}
temp	vector	$tmp58	%read{125,125} %write{124,124}
temp	float	$tmp59	%read{135,135} %write{131,131}
temp	float	$tmp60	%read{133,133} %write{132,132}
temp	float	$tmp61	%read{134,134} %write{133,133}
temp	float	$tmp62	%read{135,135} %write{134,134}
temp	float	$tmp63	%read{170,170} %write{135,135}
temp	float	$tmp64	%read{137,137} %write{136,136}
temp	float	$tmp65	%read{139,139} %write{137,137}
temp	float	$tmp66	%read{139,139} %write{138,138}
temp	float	$tmp67	%read{170,170} %write{139,139}
temp	float	$tmp68	%read{141,141} %write{140,140}
temp	float	$tmp69	%read{143,143} %write{141,141}
temp	float	$tmp70	%read{143,143} %write{142,142}
temp	float	$tmp71	%read{170,170} %write{143,143}
temp	float	$tmp72	%read{145,145} %write{144,144}
temp	float	$tmp73	%read{147,147} %write{145,145}
temp	float	$tmp74	%read{147,147} %write{146,146}
temp	float	$tmp75	%read{170,170} %write{147,147}
temp	float	$tmp76	%read{152,152} %write{148,148}
temp	float	$tmp77	%read{150,150} %write{149,149}
temp	float	$tmp78	%read{151,151} %write{150,150}
temp	float	$tmp79	%read{152,152} %write{151,151}
temp	float	$tmp80	%read{170,170} %write{152,152}
temp	float	$tmp81	%read{154,154} %write{153,153}
temp	float	$tmp82	%read{156,156} %write{154,154}
temp	float	$tmp83	%read{156,156} %write{155,155}
temp	float	$tmp84	%read{170,170} %write{156,156}
temp	float	$tmp85	%read{158,158} %write{157,157}
temp	float	$tmp86	%read{160,160} %write{158,158}
temp	float	$tmp87	%read{160,160} %write{159,159}
temp	float	$tmp88	%read{170,170} %write{160,160}
temp	float	$tmp89	%read{162,162} %write{161,161}
temp	float	$tmp90	%read{164,164} %write{162,162}
temp	float	$tmp91	%read{164,164} %write{163,163}
temp	float	$tmp92	%read{170,170} %write{164,164}
temp	float	$tmp93	%read{169,169} %write{165,165}
temp	float	$tmp94	%read{167,167} %write{166,166}
temp	float	$tmp95	%read{168,168} %write{167,167}
temp	float	$tmp96	%read{169,169} %write{168,168}
temp	float	$tmp97	%read{170,170} %write{169,169}
temp	vector	$tmp98	%read{173,173} %write{172,172}
temp	vector	$tmp99	%read{172,172} %write{171,171}
code ___main___
# test.osl:4
#     printf ("Test vector functions\n\n");
	printf		$const1 	%filename{"test.osl"} %line{4} %argrw{"r"}
# test.osl:5
#     vector X = vector (1, 0, 0);
	assign		X $const2 	%line{5} %argrw{"wr"}
# test.osl:6
#     vector Y = vector (0, 1, 0);
	assign		Y $const3 	%line{6} %argrw{"wr"}
# test.osl:7
#     vector XY = X + Y;
	add		XY X Y 	%line{7} %argrw{"wrr"}
# test.osl:8
#     vector Zero = 0;
	assign		Zero $const4 	%line{8} %argrw{"wr"}
# test.osl:10
#         vector V = vector (0, 1, 2);
	assign		___296_V $const5 	%line{10} %argrw{"wr"}
# test.osl:12
#                 V, V[0], V[1], V[2]);
	compref		$tmp1 ___296_V $const4 	%line{12} %argrw{"wrr"}
	compref		$tmp2 ___296_V $const7 	%argrw{"wrr"}
	compref		$tmp3 ___296_V $const8 	%argrw{"wrr"}
	printf		$const6 ___296_V $tmp1 $tmp2 $tmp3 	%argrw{"rrrrr"}
# test.osl:13
#         V[1] = 8;
	compassign	___296_V $const7 $const9 	%line{13} %argrw{"wrr"}
# test.osl:14
#         printf ("  After V[1] = 8, V = (%g)\n", V);
	printf		$const10 ___296_V 	%line{14} %argrw{"rr"}
# test.osl:15
#         V[2] = 0.5;
	compassign	___296_V $const8 $const11 	%line{15} %argrw{"wrr"}
# test.osl:16
#         printf ("  After V[2] = 0.5, V = (%g)\n", V);
	printf		$const12 ___296_V 	%line{16} %argrw{"rr"}
# test.osl:17
#         printf ("  dot ((%g), (%g)) = %g\n", V, V, dot(V,V));
	dot		$tmp4 ___296_V ___296_V 	%line{17} %argrw{"wrr"}
	printf		$const13 ___296_V ___296_V $tmp4 	%argrw{"rrrr"}
# test.osl:18
#         printf ("  dot ((%g), (%g)) = %g\n", V, Y, dot(V,Y));
	dot		$tmp5 ___296_V Y 	%line{18} %argrw{"wrr"}
	printf		$const13 ___296_V Y $tmp5 	%argrw{"rrrr"}
# test.osl:19
#         printf ("  cross ((%g), (%g)) = %g\n", X, Y, cross(X,Y));
	cross		$tmp6 X Y 	%line{19} %argrw{"wrr"}
	printf		$const14 X Y $tmp6 	%argrw{"rrrr"}
# test.osl:20
#         printf ("  length (%g) = %g\n", Y, length(Y));
	length		$tmp7 Y 	%line{20} %argrw{"wr"}
	printf		$const15 Y $tmp7 	%argrw{"rrr"}
# test.osl:21
#         printf ("  length (%g) = %g\n", XY, length(XY));
	length		$tmp8 XY 	%line{21} %argrw{"wr"}
	printf		$const15 XY $tmp8 	%argrw{"rrr"}
# test.osl:22
#         printf ("  distance ((%g), (%g)) = %g\n", X, Y, distance(X,Y));
	distance	$tmp9 X Y 	%line{22} %argrw{"wrr"}
	printf		$const16 X Y $tmp9 	%argrw{"rrrr"}
# test.osl:23
#         printf ("  distance ((%g), (%g)) = %g\n", X, XY, distance(X,XY));
	distance	$tmp10 X XY 	%line{23} %argrw{"wrr"}
	printf		$const16 X XY $tmp10 	%argrw{"rrrr"}
# test.osl:25
#                 X, Y, X, distance(X,Y,X));
	functioncall	$const18 44 	%line{25} %argrw{"r"}
# /usr/local/shaders/stdosl.h:181
# #else
	sub		___210_d Y X 	%filename{"/usr/local/shaders/stdosl.h"} %line{181} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:182
# normal mix (normal x, normal y, normal a) BUILTIN;
	dot		___210_dd ___210_d ___210_d 	%line{182} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:183
# normal mix (normal x, normal y, float  a) BUILTIN;
	eq		$tmp12 ___210_dd $const19 	%line{183} %argrw{"wrr"}
	if		$tmp12 35 35 	%argrw{"r"}
# /usr/local/shaders/stdosl.h:184
# vector mix (vector x, vector y, vector a) BUILTIN;
	distance	$tmp11 X X 	%line{184} %argrw{"wrr"}
	return
# /usr/local/shaders/stdosl.h:185
# vector mix (vector x, vector y, float  a) BUILTIN;
	sub		$tmp14 X X 	%line{185} %argrw{"wrr"}
	dot		$tmp13 $tmp14 ___210_d 	%argrw{"wrr"}
	div		___210_t $tmp13 ___210_dd 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
# point  mix (point  x, point  y, point  a) BUILTIN;
	functioncall	$const21 41 	%line{186} %argrw{"r"}
# /usr/local/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp16 ___210_t $const20 	%line{144} %argrw{"wrr"}
	max		$tmp15 $tmp16 $const19 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
#     return distance(q, a + clamp(t, 0.0, 1.0)*d);
	mul		$tmp17 $tmp15 ___210_d 	%line{186} %argrw{"wrr"}
	add		$tmp18 X $tmp17 	%argrw{"wrr"}
	distance	$tmp11 X $tmp18 	%argrw{"wrr"}
# test.osl:25
#                 X, Y, X, distance(X,Y,X));
	printf		$const17 X Y X $tmp11 	%filename{"test.osl"} %line{25} %argrw{"rrrrr"}
# test.osl:27
#                 X, Y, Y, distance(X,Y,Y));
	functioncall	$const18 61 	%line{27} %argrw{"r"}
# /usr/local/shaders/stdosl.h:181
# color  mix (color  x, color  y, float  a) { return x*(1-a) + y*a; }
	sub		___210_d Y X 	%filename{"/usr/local/shaders/stdosl.h"} %line{181} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:182
# float  mix (float  x, float  y, float  a) { return x*(1-a) + y*a; }
	dot		___210_dd ___210_d ___210_d 	%line{182} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:183
# #else
	eq		$tmp20 ___210_dd $const19 	%line{183} %argrw{"wrr"}
	if		$tmp20 52 52 	%argrw{"r"}
# /usr/local/shaders/stdosl.h:184
# normal mix (normal x, normal y, normal a) BUILTIN;
	distance	$tmp19 Y X 	%line{184} %argrw{"wrr"}
	return
# /usr/local/shaders/stdosl.h:185
# normal mix (normal x, normal y, float  a) BUILTIN;
	sub		$tmp22 Y X 	%line{185} %argrw{"wrr"}
	dot		$tmp21 $tmp22 ___210_d 	%argrw{"wrr"}
	div		___210_t $tmp21 ___210_dd 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
# vector mix (vector x, vector y, vector a) BUILTIN;
	functioncall	$const21 58 	%line{186} %argrw{"r"}
# /usr/local/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp24 ___210_t $const20 	%line{144} %argrw{"wrr"}
	max		$tmp23 $tmp24 $const19 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
#     return distance(q, a + clamp(t, 0.0, 1.0)*d);
	mul		$tmp25 $tmp23 ___210_d 	%line{186} %argrw{"wrr"}
	add		$tmp26 X $tmp25 	%argrw{"wrr"}
	distance	$tmp19 Y $tmp26 	%argrw{"wrr"}
# test.osl:27
#                 X, Y, Y, distance(X,Y,Y));
	printf		$const17 X Y Y $tmp19 	%filename{"test.osl"} %line{27} %argrw{"rrrrr"}
# test.osl:28
#         point Q = point(0.5,0.5,0);
	assign		___296_Q $const22 	%line{28} %argrw{"wr"}
# test.osl:30
#                 X, Y, Q, distance(X,Y,Q));
	functioncall	$const18 79 	%line{30} %argrw{"r"}
# /usr/local/shaders/stdosl.h:181
# point  mix (point  x, point  y, point  a) { return x*(1-a) + y*a; }
	sub		___210_d Y X 	%filename{"/usr/local/shaders/stdosl.h"} %line{181} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:182
# point  mix (point  x, point  y, float  a) { return x*(1-a) + y*a; }
	dot		___210_dd ___210_d ___210_d 	%line{182} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:183
# color  mix (color  x, color  y, color  a) { return x*(1-a) + y*a; }
	eq		$tmp28 ___210_dd $const19 	%line{183} %argrw{"wrr"}
	if		$tmp28 70 70 	%argrw{"r"}
# /usr/local/shaders/stdosl.h:184
# color  mix (color  x, color  y, float  a) { return x*(1-a) + y*a; }
	distance	$tmp27 ___296_Q X 	%line{184} %argrw{"wrr"}
	return
# /usr/local/shaders/stdosl.h:185
# float  mix (float  x, float  y, float  a) { return x*(1-a) + y*a; }
	sub		$tmp30 ___296_Q X 	%line{185} %argrw{"wrr"}
	dot		$tmp29 $tmp30 ___210_d 	%argrw{"wrr"}
	div		___210_t $tmp29 ___210_dd 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
# #else
	functioncall	$const21 76 	%line{186} %argrw{"r"}
# /usr/local/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp32 ___210_t $const20 	%line{144} %argrw{"wrr"}
	max		$tmp31 $tmp32 $const19 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
#     return distance(q, a + clamp(t, 0.0, 1.0)*d);
	mul		$tmp33 $tmp31 ___210_d 	%line{186} %argrw{"wrr"}
	add		$tmp34 X $tmp33 	%argrw{"wrr"}
	distance	$tmp27 ___296_Q $tmp34 	%argrw{"wrr"}
# test.osl:30
#                 X, Y, Q, distance(X,Y,Q));
	printf		$const17 X Y ___296_Q $tmp27 	%filename{"test.osl"} %line{30} %argrw{"rrrrr"}
# test.osl:31
#         Q = point(0.5,0.5,0.5);
	assign		___296_Q $const23 	%line{31} %argrw{"wr"}
# test.osl:33
#                 X, Y, Q, distance(X,Y,Q));
	functioncall	$const18 97 	%line{33} %argrw{"r"}
# /usr/local/shaders/stdosl.h:181
# normal mix (normal x, normal y, float  a) { return x*(1-a) + y*a; }
	sub		___210_d Y X 	%filename{"/usr/local/shaders/stdosl.h"} %line{181} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:182
# vector mix (vector x, vector y, vector a) { return x*(1-a) + y*a; }
	dot		___210_dd ___210_d ___210_d 	%line{182} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:183
# vector mix (vector x, vector y, float  a) { return x*(1-a) + y*a; }
	eq		$tmp36 ___210_dd $const19 	%line{183} %argrw{"wrr"}
	if		$tmp36 88 88 	%argrw{"r"}
# /usr/local/shaders/stdosl.h:184
# point  mix (point  x, point  y, point  a) { return x*(1-a) + y*a; }
	distance	$tmp35 ___296_Q X 	%line{184} %argrw{"wrr"}
	return
# /usr/local/shaders/stdosl.h:185
# point  mix (point  x, point  y, float  a) { return x*(1-a) + y*a; }
	sub		$tmp38 ___296_Q X 	%line{185} %argrw{"wrr"}
	dot		$tmp37 $tmp38 ___210_d 	%argrw{"wrr"}
	div		___210_t $tmp37 ___210_dd 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
# color  mix (color  x, color  y, color  a) { return x*(1-a) + y*a; }
	functioncall	$const21 94 	%line{186} %argrw{"r"}
# /usr/local/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp40 ___210_t $const20 	%line{144} %argrw{"wrr"}
	max		$tmp39 $tmp40 $const19 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
#     return distance(q, a + clamp(t, 0.0, 1.0)*d);
	mul		$tmp41 $tmp39 ___210_d 	%line{186} %argrw{"wrr"}
	add		$tmp42 X $tmp41 	%argrw{"wrr"}
	distance	$tmp35 ___296_Q $tmp42 	%argrw{"wrr"}
# test.osl:33
#                 X, Y, Q, distance(X,Y,Q));
	printf		$const17 X Y ___296_Q $tmp35 	%filename{"test.osl"} %line{33} %argrw{"rrrrr"}
# test.osl:34
#         Q = point(2,1,0);
	assign		___296_Q $const24 	%line{34} %argrw{"wr"}
# test.osl:36
#                 X, Y, Q, distance(X,Y,Q));
	functioncall	$const18 115 	%line{36} %argrw{"r"}
# /usr/local/shaders/stdosl.h:181
# int    clamp (int x, int minval, int maxval) { return max(min(x,maxval),minval); }
	sub		___210_d Y X 	%filename{"/usr/local/shaders/stdosl.h"} %line{181} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:182
# #if 0
	dot		___210_dd ___210_d ___210_d 	%line{182} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:183
# normal mix (normal x, normal y, normal a) { return x*(1-a) + y*a; }
	eq		$tmp44 ___210_dd $const19 	%line{183} %argrw{"wrr"}
	if		$tmp44 106 106 	%argrw{"r"}
# /usr/local/shaders/stdosl.h:184
# normal mix (normal x, normal y, float  a) { return x*(1-a) + y*a; }
	distance	$tmp43 ___296_Q X 	%line{184} %argrw{"wrr"}
	return
# /usr/local/shaders/stdosl.h:185
# vector mix (vector x, vector y, vector a) { return x*(1-a) + y*a; }
	sub		$tmp46 ___296_Q X 	%line{185} %argrw{"wrr"}
	dot		$tmp45 $tmp46 ___210_d 	%argrw{"wrr"}
	div		___210_t $tmp45 ___210_dd 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
# vector mix (vector x, vector y, float  a) { return x*(1-a) + y*a; }
	functioncall	$const21 112 	%line{186} %argrw{"r"}
# /usr/local/shaders/stdosl.h:144
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp48 ___210_t $const20 	%line{144} %argrw{"wrr"}
	max		$tmp47 $tmp48 $const19 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:186
#     return distance(q, a + clamp(t, 0.0, 1.0)*d);
	mul		$tmp49 $tmp47 ___210_d 	%line{186} %argrw{"wrr"}
	add		$tmp50 X $tmp49 	%argrw{"wrr"}
	distance	$tmp43 ___296_Q $tmp50 	%argrw{"wrr"}
# test.osl:36
#                 X, Y, Q, distance(X,Y,Q));
	printf		$const17 X Y ___296_Q $tmp43 	%filename{"test.osl"} %line{36} %argrw{"rrrrr"}
# test.osl:37
#         printf ("  normalize (%g) = %g\n", XY, normalize(XY));
	normalize	$tmp51 XY 	%line{37} %argrw{"wr"}
	printf		$const25 XY $tmp51 	%argrw{"rrr"}
# test.osl:38
#         printf ("  normalize (%g) = %g\n", V, normalize(V));
	normalize	$tmp52 ___296_V 	%line{38} %argrw{"wr"}
	printf		$const25 ___296_V $tmp52 	%argrw{"rrr"}
# test.osl:39
#         printf ("  normalize (%g) = %g\n", Zero, normalize(Zero));
	normalize	$tmp53 Zero 	%line{39} %argrw{"wr"}
	printf		$const25 Zero $tmp53 	%argrw{"rrr"}
# test.osl:43
#             X, rotate (X, M_PI/2, point(0,0,0), point(0,0,1)));
	div		$tmp55 $const27 $const28 	%line{43} %argrw{"wrr"}
	functioncall	$const31 174 	%argrw{"r"}
# /usr/local/shaders/stdosl.h:250
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	sub		$tmp58 $const30 $const29 	%filename{"/usr/local/shaders/stdosl.h"} %line{250} %argrw{"wrr"}
	normalize	___233_axis $tmp58 	%argrw{"wr"}
# /usr/local/shaders/stdosl.h:252
#         g = sqrt (g);
	sincos		$tmp55 ___233_sinang ___233_cosang 	%line{252} %argrw{"rww"}
# /usr/local/shaders/stdosl.h:253
#         float beta = g - c;
	sub		___233_cosang1 $const20 ___233_cosang 	%line{253} %argrw{"wrr"}
# /usr/local/shaders/stdosl.h:254
#         float F = (c * (g+c) - 1.0) / (c * beta + 1.0);
	compref		___233_x ___233_axis $const4 	%line{254} %argrw{"wrr"}
	compref		___233_y ___233_axis $const7 	%argrw{"wrr"}
	compref		___233_z ___233_axis $const8 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:255
#         F = 0.5 * (1.0 + sqr(F));
	mul		$tmp59 ___233_x ___233_x 	%line{255} %argrw{"wrr"}
	mul		$tmp60 ___233_x ___233_x 	%argrw{"wrr"}
	sub		$tmp61 $const20 $tmp60 	%argrw{"wrr"}
	mul		$tmp62 $tmp61 ___233_cosang 	%argrw{"wrr"}
	add		$tmp63 $tmp59 $tmp62 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:256
#         F *= sqr (beta / (g+c));
	mul		$tmp64 ___233_x ___233_y 	%line{256} %argrw{"wrr"}
	mul		$tmp65 $tmp64 ___233_cosang1 	%argrw{"wrr"}
	mul		$tmp66 ___233_z ___233_sinang 	%argrw{"wrr"}
	add		$tmp67 $tmp65 $tmp66 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:257
#         Kr = F;
	mul		$tmp68 ___233_x ___233_z 	%line{257} %argrw{"wrr"}
	mul		$tmp69 $tmp68 ___233_cosang1 	%argrw{"wrr"}
	mul		$tmp70 ___233_y ___233_sinang 	%argrw{"wrr"}
	sub		$tmp71 $tmp69 $tmp70 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:259
#         // OPT: the following recomputes some of the above values, but it 
	mul		$tmp72 ___233_x ___233_y 	%line{259} %argrw{"wrr"}
	mul		$tmp73 $tmp72 ___233_cosang1 	%argrw{"wrr"}
	mul		$tmp74 ___233_z ___233_sinang 	%argrw{"wrr"}
	sub		$tmp75 $tmp73 $tmp74 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:260
#         // gives us the same result as if the shader-writer called refract()
	mul		$tmp76 ___233_y ___233_y 	%line{260} %argrw{"wrr"}
	mul		$tmp77 ___233_y ___233_y 	%argrw{"wrr"}
	sub		$tmp78 $const20 $tmp77 	%argrw{"wrr"}
	mul		$tmp79 $tmp78 ___233_cosang 	%argrw{"wrr"}
	add		$tmp80 $tmp76 $tmp79 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:261
#         T = refract(I, N, eta);
	mul		$tmp81 ___233_y ___233_z 	%line{261} %argrw{"wrr"}
	mul		$tmp82 $tmp81 ___233_cosang1 	%argrw{"wrr"}
	mul		$tmp83 ___233_x ___233_sinang 	%argrw{"wrr"}
	add		$tmp84 $tmp82 $tmp83 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:263
#         // total internal reflection
	mul		$tmp85 ___233_x ___233_z 	%line{263} %argrw{"wrr"}
	mul		$tmp86 $tmp85 ___233_cosang1 	%argrw{"wrr"}
	mul		$tmp87 ___233_y ___233_sinang 	%argrw{"wrr"}
	add		$tmp88 $tmp86 $tmp87 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:264
#         Kr = 1.0;
	mul		$tmp89 ___233_y ___233_z 	%line{264} %argrw{"wrr"}
	mul		$tmp90 $tmp89 ___233_cosang1 	%argrw{"wrr"}
	mul		$tmp91 ___233_x ___233_sinang 	%argrw{"wrr"}
	sub		$tmp92 $tmp90 $tmp91 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:265
#         Kt = 0.0;
	mul		$tmp93 ___233_z ___233_z 	%line{265} %argrw{"wrr"}
	mul		$tmp94 ___233_z ___233_z 	%argrw{"wrr"}
	sub		$tmp95 $const20 $tmp94 	%argrw{"wrr"}
	mul		$tmp96 $tmp95 ___233_cosang 	%argrw{"wrr"}
	add		$tmp97 $tmp93 $tmp96 	%argrw{"wrr"}
# /usr/local/shaders/stdosl.h:267
#     }
	matrix		___233_M $tmp63 $tmp67 $tmp71 $const19 $tmp75 $tmp80 $tmp84 $const19 $tmp88 $tmp92 $tmp97 $const19 $const19 $const19 $const19 $const20 	%line{267} %argrw{"wrrrrrrrrrrrrrrrr"}
# /usr/local/shaders/stdosl.h:268
# }
	sub		$tmp99 X $const29 	%line{268} %argrw{"wrr"}
	transformv	$tmp98 ___233_M $tmp99 	%argrw{"wrr"}
	add		$tmp54 $tmp98 $const29 	%argrw{"wrr"}
# test.osl:43
#             X, rotate (X, M_PI/2, point(0,0,0), point(0,0,1)));
	printf		$const26 X $tmp54 	%filename{"test.osl"} %line{43} %argrw{"rrr"}
	end
